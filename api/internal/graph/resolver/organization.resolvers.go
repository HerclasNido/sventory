package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input model.CreateOrganizationInput) (*model.Organization, error) {
	organization := model.Organization{
		Name:        input.Name,
		Description: getStringValue(input.Description),
		AdminEmail:  input.AdminEmail,
		TaxID:       getStringValue(input.TaxID),
		LogoURL:     getStringValue(input.LogoURL),
	}

	if err := database.DB.Create(&organization).Error; err != nil {
		return nil, err
	}

	return &organization, nil
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id string, input model.UpdateOrganizationInput) (*model.Organization, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}

	var organization model.Organization
	if err := database.DB.First(&organization, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		organization.Name = *input.Name
	}

	if input.Description != nil {
		organization.Description = *input.Description
	}

	if input.AdminEmail != nil {
		organization.AdminEmail = *input.AdminEmail
	}

	if input.TaxID != nil {
		organization.TaxID = *input.TaxID
	}

	if input.LogoURL != nil {
		organization.LogoURL = *input.LogoURL
	}

	if err := database.DB.Save(&organization).Error; err != nil {
		return nil, err
	}

	return &organization, nil
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id string) (bool, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.Organization{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// ID is the resolver for the id field.
func (r *organizationResolver) ID(ctx context.Context, obj *model.Organization) (string, error) {
	return obj.ID.String(), nil
}

// Locations is the resolver for the locations field.
func (r *organizationResolver) Locations(ctx context.Context, obj *model.Organization) ([]*model.Location, error) {
	var locations []*model.Location
	if err := database.DB.Model(obj).Association("Locations").Find(&locations); err != nil {
		return nil, err
	}

	return locations, nil
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, options *model.QueryOptions) ([]*model.Organization, error) {
	var organizations []*model.Organization

	query := database.DB.Model(&model.Organization{})

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.Organization{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&organizations).Error; err != nil {
		return nil, err
	}

	return organizations, nil
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*model.Organization, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var organization model.Organization
	if err := database.DB.First(&organization, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &organization, nil
}

// Organization returns generated.OrganizationResolver implementation.
func (r *Resolver) Organization() generated.OrganizationResolver { return &organizationResolver{r} }

type organizationResolver struct{ *Resolver }
