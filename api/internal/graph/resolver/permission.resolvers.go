package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"

	"github.com/google/uuid"
)

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input model.CreatePermissionInput) (*model.Permission, error) {
	permission := &model.Permission{
		Name:        input.Name,
		Description: getStringValue(input.Description),
	}
	if err := database.DB.Create(permission).Error; err != nil {
		return nil, err
	}

	return permission, nil
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, id string, input model.UpdatePermissionInput) (*model.Permission, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	var permission model.Permission
	if err := database.DB.First(&permission, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		permission.Name = *input.Name
	}

	if input.Description != nil {
		permission.Description = *input.Description
	}

	if err := database.DB.Save(&permission).Error; err != nil {
		return nil, err
	}

	return &permission, nil
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id string) (bool, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.Permission{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// AssignRolePermission is the resolver for the assignRolePermission field.
func (r *mutationResolver) AssignRolePermission(ctx context.Context, roleID string, permissionID string) (*model.RolePermission, error) {
	roleUUID, err := uuid.Parse(roleID)
	if err != nil {
		return nil, err
	}

	permissionUUID, err := uuid.Parse(permissionID)
	if err != nil {
		return nil, err
	}

	var rolePermission model.RolePermission
	if err := database.DB.First(&rolePermission, "role_id = ? AND permission_id = ?", roleUUID, permissionUUID).Error; err != nil {
		rolePermission = model.RolePermission{
			RoleID:       roleUUID,
			PermissionID: permissionUUID,
		}
		if err := database.DB.Create(&rolePermission).Error; err != nil {
			return nil, err
		}
	}

	return &rolePermission, nil
}

// RemoveRolePermission is the resolver for the removeRolePermission field.
func (r *mutationResolver) RemoveRolePermission(ctx context.Context, roleID string, permissionID string) (bool, error) {
	roleUUID, err := uuid.Parse(roleID)
	if err != nil {
		return false, err
	}

	permissionUUID, err := uuid.Parse(permissionID)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.RolePermission{}, "role_id = ? AND permission_id = ?", roleUUID, permissionUUID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *model.Permission) (string, error) {
	return obj.ID.String(), nil
}

// Roles is the resolver for the roles field.
func (r *permissionResolver) Roles(ctx context.Context, obj *model.Permission) ([]*model.Role, error) {
	var roles []*model.Role
	if err := database.DB.Model(obj).Association("Roles").Find(&roles); err != nil {
		return nil, err
	}

	return roles, nil
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, options *model.QueryOptions) ([]*model.Permission, error) {
	var permissions []*model.Permission

	query := database.DB.Model(&model.Permission{})

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.Permission{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&permissions).Error; err != nil {
		return nil, err
	}

	return permissions, nil
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id string) (*model.Permission, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}
	var permission model.Permission
	if err := database.DB.First(&permission, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &permission, nil
}

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

type permissionResolver struct{ *Resolver }
