package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	hashedPassword, err := hashPassword(input.Password)
	if err != nil {
		return nil, err
	}

	user := &model.User{
		Email:     input.Email,
		Password:  hashedPassword,
		FirstName: getStringValue(input.FirstName),
		LastName:  getStringValue(input.LastName),
	}

	if err := database.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	var user model.User
	if err := database.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	if input.Email != nil {
		user.Email = *input.Email
	}

	if input.Password != nil {
		hashedPassword, err := hashPassword(getStringValue(input.Password))
		if err != nil {
			return nil, err
		}
		user.Password = string(hashedPassword)
	}

	if input.FirstName != nil {
		user.FirstName = *input.FirstName
	}

	if input.LastName != nil {
		user.LastName = *input.LastName
	}

	if err := database.DB.Save(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.User{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, options *model.QueryOptions) ([]*model.User, error) {
	if err := CheckPermission(ctx, r.PermChecker, "users:list"); err != nil {
		return nil, err
	}

	var users []*model.User

	query := database.DB.Model(&model.User{}).
		Preload("Roles").
		Preload("Organizations")

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.User{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var user model.User
	if err := database.DB.First(&user, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	return obj.ID.String(), nil
}

// Roles is the resolver for the roles field.
func (r *userResolver) Roles(ctx context.Context, obj *model.User) ([]*model.Role, error) {
	var roles []*model.Role
	if err := database.DB.Model(obj).Association("Roles").Find(&roles); err != nil {
		return nil, err
	}
	return roles, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
