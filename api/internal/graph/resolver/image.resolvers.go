package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"io"
	"os"
	"sventory/internal/database"
	"sventory/internal/graph/model"
	"time"
)

// UploadItemImage is the resolver for the uploadItemImage field.
func (r *mutationResolver) UploadItemImage(ctx context.Context, input model.UploadItemImageInput) (string, error) {
	// Ensure uploads folder exists
	uploadDir := "./uploads"
	if err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {
		return "", fmt.Errorf("failed to create upload directory: %w", err)
	}

	// Generate unique filename
	filename := fmt.Sprintf("%d_%s", time.Now().Unix(), input.Image.Filename)
	filepath := fmt.Sprintf("%s/%s", uploadDir, filename)

	// Open destination file
	out, err := os.Create(filepath)
	if err != nil {
		return "", fmt.Errorf("failed to create file: %w", err)
	}
	defer out.Close()

	// Copy uploaded file to storage
	_, err = io.Copy(out, input.Image.File)
	if err != nil {
		return "", fmt.Errorf("failed to save file: %w", err)
	}

	// Construct public URL (for local dev)
	imageURL := fmt.Sprintf("http://localhost:%s/uploads/%s", os.Getenv("PORT"), filename)

	// Verify if item exists
	itemID, err := parseUUID(input.ItemID)
	if err != nil {
		return "", err
	}
	item := model.Item{}
	if err := database.DB.First(&item, "id = ?", itemID).Error; err != nil {
		return "", err
	}

	// Save image URL to item
	item.ImageURL = imageURL
	if err := database.DB.Save(&item).Error; err != nil {
		return "", err
	}

	return imageURL, nil
}
