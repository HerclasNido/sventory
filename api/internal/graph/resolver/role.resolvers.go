package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.Role, error) {
	role := &model.Role{
		Name:        input.Name,
		Description: getStringValue(input.Description),
	}
	if err := database.DB.Create(role).Error; err != nil {
		return nil, err
	}
	return role, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input model.UpdateRoleInput) (*model.Role, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var role model.Role
	if err := database.DB.First(&role, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		role.Name = *input.Name
	}

	if input.Description != nil {
		role.Description = *input.Description
	}

	if err := database.DB.Save(&role).Error; err != nil {
		return nil, err
	}

	return &role, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.Role{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// AssignUserRole is the resolver for the assignUserRole field.
func (r *mutationResolver) AssignUserRole(ctx context.Context, userID string, roleID string) (*model.UserRole, error) {
	userUUID, err := parseUUID(userID)
	if err != nil {
		return nil, err
	}

	roleUUID, err := parseUUID(roleID)
	if err != nil {
		return nil, err
	}

	userRole := &model.UserRole{
		UserID: userUUID,
		RoleID: roleUUID,
	}
	if err := database.DB.Create(userRole).Error; err != nil {
		return nil, err
	}
	return userRole, nil
}

// RemoveUserRole is the resolver for the removeUserRole field.
func (r *mutationResolver) RemoveUserRole(ctx context.Context, userID string, roleID string) (bool, error) {
	userUUID, err := parseUUID(userID)
	if err != nil {
		return false, err
	}

	roleUUID, err := parseUUID(roleID)
	if err != nil {
		return false, err
	}

	if err := database.DB.Delete(&model.UserRole{}, "user_id = ? AND role_id = ?", userUUID, roleUUID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, options *model.QueryOptions) ([]*model.Role, error) {
	var roles []*model.Role

	query := database.DB.Model(&model.Role{}).Preload("Permissions")

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.Role{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&roles).Error; err != nil {
		return nil, err
	}
	return roles, nil
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*model.Role, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var role model.Role
	if err := database.DB.Preload("Permissions").First(&role, "id = ?", entityID).Error; err != nil {
		return nil, err
	}
	return &role, nil
}

// ID is the resolver for the id field.
func (r *roleResolver) ID(ctx context.Context, obj *model.Role) (string, error) {
	return obj.ID.String(), nil
}

// Permissions is the resolver for the permissions field.
func (r *roleResolver) Permissions(ctx context.Context, obj *model.Role) ([]*model.Permission, error) {
	var permissions []*model.Permission
	if err := database.DB.Model(obj).Association("Permissions").Find(&permissions); err != nil {
		return nil, err
	}
	return permissions, nil
}

// Users is the resolver for the users field.
func (r *roleResolver) Users(ctx context.Context, obj *model.Role) ([]*model.User, error) {
	var users []*model.User
	if err := database.DB.Model(obj).Association("Users").Find(&users); err != nil {
		return nil, err
	}
	return users, nil
}

// ID is the resolver for the id field.
func (r *rolePermissionResolver) ID(ctx context.Context, obj *model.RolePermission) (string, error) {
	return obj.ID.String(), nil
}

// Role is the resolver for the role field.
func (r *rolePermissionResolver) Role(ctx context.Context, obj *model.RolePermission) (*model.Role, error) {
	var role model.Role
	if err := database.DB.First(&role, "id = ?", obj.RoleID).Error; err != nil {
		return nil, err
	}
	return &role, nil
}

// Permission is the resolver for the permission field.
func (r *rolePermissionResolver) Permission(ctx context.Context, obj *model.RolePermission) (*model.Permission, error) {
	var permission model.Permission
	if err := database.DB.First(&permission, "id = ?", obj.PermissionID).Error; err != nil {
		return nil, err
	}
	return &permission, nil
}

// ID is the resolver for the id field.
func (r *userRoleResolver) ID(ctx context.Context, obj *model.UserRole) (string, error) {
	return obj.ID.String(), nil
}

// User is the resolver for the user field.
func (r *userRoleResolver) User(ctx context.Context, obj *model.UserRole) (*model.User, error) {
	var user model.User
	if err := database.DB.First(&user, "id = ?", obj.UserID).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

// Role is the resolver for the role field.
func (r *userRoleResolver) Role(ctx context.Context, obj *model.UserRole) (*model.Role, error) {
	var role model.Role
	if err := database.DB.First(&role, "id = ?", obj.RoleID).Error; err != nil {
		return nil, err
	}
	return &role, nil
}

// Role returns generated.RoleResolver implementation.
func (r *Resolver) Role() generated.RoleResolver { return &roleResolver{r} }

// RolePermission returns generated.RolePermissionResolver implementation.
func (r *Resolver) RolePermission() generated.RolePermissionResolver {
	return &rolePermissionResolver{r}
}

// UserRole returns generated.UserRoleResolver implementation.
func (r *Resolver) UserRole() generated.UserRoleResolver { return &userRoleResolver{r} }

type roleResolver struct{ *Resolver }
type rolePermissionResolver struct{ *Resolver }
type userRoleResolver struct{ *Resolver }
