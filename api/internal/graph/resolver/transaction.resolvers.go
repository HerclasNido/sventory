package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"

	"github.com/google/uuid"
)

// CreateInventoryTransaction is the resolver for the createInventoryTransaction field.
func (r *mutationResolver) CreateInventoryTransaction(ctx context.Context, input model.CreateInventoryTransactionInput) (*model.InventoryTransaction, error) {
	organizationID, err := uuid.Parse(input.OrganizationID)
	if err != nil {
		return nil, err
	}

	inventoryTransaction := &model.InventoryTransaction{
		OrganizationID:  organizationID,
		Type:            input.Type,
		ReferenceNumber: input.ReferenceNumber,
		Notes:           getStringValue(input.Notes),
	}

	if err := database.DB.Create(inventoryTransaction).Error; err != nil {
		return nil, err
	}

	return inventoryTransaction, nil
}

// UpdateInventoryTransaction is the resolver for the updateInventoryTransaction field.
func (r *mutationResolver) UpdateInventoryTransaction(ctx context.Context, id string, input model.UpdateInventoryTransactionInput) (*model.InventoryTransaction, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}
	var inventoryTransaction model.InventoryTransaction

	if err := database.DB.First(&inventoryTransaction, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.Type != nil {
		inventoryTransaction.Type = *input.Type
	}

	if input.ReferenceNumber != nil {
		inventoryTransaction.ReferenceNumber = *input.ReferenceNumber
	}

	if input.Notes != nil {
		inventoryTransaction.Notes = *input.Notes
	}

	if err := database.DB.Save(&inventoryTransaction).Error; err != nil {
		return nil, err
	}

	return &inventoryTransaction, nil
}

// DeleteInventoryTransaction is the resolver for the deleteInventoryTransaction field.
func (r *mutationResolver) DeleteInventoryTransaction(ctx context.Context, id string) (bool, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.InventoryTransaction{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// ID is the resolver for the id field.
func (r *inventoryTransactionResolver) ID(ctx context.Context, obj *model.InventoryTransaction) (string, error) {
	return obj.ID.String(), nil
}

// Organization is the resolver for the organization field.
func (r *inventoryTransactionResolver) Organization(ctx context.Context, obj *model.InventoryTransaction) (*model.Organization, error) {
	var organization model.Organization

	if err := database.DB.First(&organization, "id = ?", obj.OrganizationID).Error; err != nil {
		return nil, err
	}

	return &organization, nil
}

// Items is the resolver for the items field.
func (r *inventoryTransactionResolver) Items(ctx context.Context, obj *model.InventoryTransaction) ([]*model.TransactionItem, error) {
	var items []*model.TransactionItem

	if err := database.DB.Where("inventory_transaction_id = ?", obj.ID).Find(&items).Error; err != nil {
		return nil, err
	}

	return items, nil
}

// InventoryTransactions is the resolver for the inventoryTransactions field.
func (r *queryResolver) InventoryTransactions(ctx context.Context, options *model.QueryOptions) ([]*model.InventoryTransaction, error) {
	var transactions []*model.InventoryTransaction

	query := database.DB.Model(&model.InventoryTransaction{})

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.InventoryTransaction{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&transactions).Error; err != nil {
		return nil, err
	}

	return transactions, nil
}

// InventoryTransaction is the resolver for the inventoryTransaction field.
func (r *queryResolver) InventoryTransaction(ctx context.Context, id string) (*model.InventoryTransaction, error) {
	entityID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}
	var transaction model.InventoryTransaction
	if err := database.DB.First(&transaction, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &transaction, nil
}

// InventoryTransaction returns generated.InventoryTransactionResolver implementation.
func (r *Resolver) InventoryTransaction() generated.InventoryTransactionResolver {
	return &inventoryTransactionResolver{r}
}

type inventoryTransactionResolver struct{ *Resolver }
