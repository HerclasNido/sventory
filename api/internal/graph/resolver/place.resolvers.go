package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"
)

// CreatePlace is the resolver for the createPlace field.
func (r *mutationResolver) CreatePlace(ctx context.Context, input model.CreatePlaceInput) (*model.Place, error) {
	organizationID, err := parseUUID(input.OrganizationID)
	if err != nil {
		return nil, err
	}

	place := model.Place{
		OrganizationID: organizationID,
		Name:           input.Name,
		Type:           input.Type,
		AddressLine1:   input.AddressLine1,
		AddressLine2:   getStringValue(input.AddressLine2),
		City:           input.City,
		State:          input.State,
		PostalCode:     input.PostalCode,
		Country:        input.Country,
	}

	if err := database.DB.Create(&place).Error; err != nil {
		return nil, err
	}

	return &place, nil
}

// UpdatePlace is the resolver for the updatePlace field.
func (r *mutationResolver) UpdatePlace(ctx context.Context, id string, input model.UpdatePlaceInput) (*model.Place, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}

	var place model.Place
	if err := database.DB.First(&place, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		place.Name = *input.Name
	}

	if input.Type != nil {
		place.Type = *input.Type
	}

	if input.AddressLine1 != nil {
		place.AddressLine1 = *input.AddressLine1
	}

	if input.AddressLine2 != nil {
		place.AddressLine2 = *input.AddressLine2
	}

	if input.City != nil {
		place.City = *input.City
	}

	if input.State != nil {
		place.State = *input.State
	}

	if input.PostalCode != nil {
		place.PostalCode = *input.PostalCode
	}

	if input.Country != nil {
		place.Country = *input.Country
	}

	if err := database.DB.Save(&place).Error; err != nil {
		return nil, err
	}

	return &place, nil
}

// DeletePlace is the resolver for the deletePlace field.
func (r *mutationResolver) DeletePlace(ctx context.Context, id string) (bool, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return false, err
	}

	if err := database.DB.Delete(&model.Place{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// Places is the resolver for the places field.
func (r *queryResolver) Places(ctx context.Context, options *model.QueryOptions) ([]*model.Place, error) {
	var places []*model.Place

	query := database.DB.Model(&model.Place{})

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.Place{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&places).Error; err != nil {
		return nil, err
	}

	return places, nil
}

// Place is the resolver for the place field.
func (r *queryResolver) Place(ctx context.Context, id string) (*model.Place, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var place model.Place
	if err := database.DB.First(&place, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &place, nil
}

// ID is the resolver for the id field.
func (r *placeResolver) ID(ctx context.Context, obj *model.Place) (string, error) {
	return obj.ID.String(), nil
}

// Organization is the resolver for the organization field.
func (r *placeResolver) Organization(ctx context.Context, obj *model.Place) (*model.Organization, error) {
	var organization model.Organization

	if err := database.DB.First(&organization, "id = ?", obj.OrganizationID).Error; err != nil {
		return nil, err
	}

	return &organization, nil
}

// Locations is the resolver for the locations field.
func (r *placeResolver) Locations(ctx context.Context, obj *model.Place) ([]*model.Location, error) {
	var locations []*model.Location

	if err := database.DB.Model(obj).Association("Locations").Find(&locations); err != nil {
		return nil, err
	}

	return locations, nil
}

// Place returns generated.PlaceResolver implementation.
func (r *Resolver) Place() generated.PlaceResolver { return &placeResolver{r} }

type placeResolver struct{ *Resolver }
