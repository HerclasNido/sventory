package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"sventory/internal/database"
	"sventory/internal/graph/generated"
	"sventory/internal/graph/model"
)

// CreateSupplierItem is the resolver for the createSupplierItem field.
func (r *mutationResolver) CreateSupplierItem(ctx context.Context, input model.CreateSupplierItemInput) (*model.SupplierItem, error) {
	supplierID, err := parseUUID(input.SupplierID)
	if err != nil {
		return nil, err
	}

	itemID, err := parseUUID(input.ItemID)
	if err != nil {
		return nil, err
	}

	supplierItem := model.SupplierItem{
		SupplierID:  supplierID,
		ItemID:      itemID,
		SupplierSKU: getStringValue(input.SupplierSku),
		UnitCost:    getIntValue(input.UnitCost),
		MOQ:         getFloatValue(input.Moq),
		LeadTime:    getIntValue(input.LeadTime),
		IsPreferred: getBoolValue(input.IsPreferred),
	}

	if err := database.DB.Create(&supplierItem).Error; err != nil {
		return nil, err
	}

	return &supplierItem, nil
}

// UpdateSupplierItem is the resolver for the updateSupplierItem field.
func (r *mutationResolver) UpdateSupplierItem(ctx context.Context, id string, input model.UpdateSupplierItemInput) (*model.SupplierItem, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}

	var supplierItem model.SupplierItem
	if err := database.DB.First(&supplierItem, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	if input.SupplierID != nil {
		supplierID, err := parseUUID(*input.SupplierID)
		if err != nil {
			return nil, err
		}
		supplierItem.SupplierID = supplierID
	}

	if input.ItemID != nil {
		itemID, err := parseUUID(*input.ItemID)
		if err != nil {
			return nil, err
		}
		supplierItem.ItemID = itemID
	}

	if input.SupplierSku != nil {
		supplierItem.SupplierSKU = *input.SupplierSku
	}

	if input.UnitCost != nil {
		supplierItem.UnitCost = *input.UnitCost
	}

	if input.Moq != nil {
		supplierItem.MOQ = *input.Moq
	}

	if input.LeadTime != nil {
		supplierItem.LeadTime = *input.LeadTime
	}

	if input.IsPreferred != nil {
		supplierItem.IsPreferred = *input.IsPreferred
	}

	if err := database.DB.Save(&supplierItem).Error; err != nil {
		return nil, err
	}

	return &supplierItem, nil
}

// DeleteSupplierItem is the resolver for the deleteSupplierItem field.
func (r *mutationResolver) DeleteSupplierItem(ctx context.Context, id string) (bool, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return false, err
	}
	if err := database.DB.Delete(&model.SupplierItem{}, "id = ?", entityID).Error; err != nil {
		return false, err
	}

	return true, nil
}

// SupplierItems is the resolver for the supplierItems field.
func (r *queryResolver) SupplierItems(ctx context.Context, options *model.QueryOptions) ([]*model.SupplierItem, error) {
	var supplierItems []*model.SupplierItem

	query := database.DB.Model(&model.SupplierItem{})

	if options != nil {
		var err error
		query, err = model.ApplyQueryOptions(query, *options, &model.SupplierItem{})
		if err != nil {
			return nil, err
		}
	}

	if err := query.Find(&supplierItems).Error; err != nil {
		return nil, err
	}

	return supplierItems, nil
}

// SupplierItem is the resolver for the supplierItem field.
func (r *queryResolver) SupplierItem(ctx context.Context, id string) (*model.SupplierItem, error) {
	entityID, err := parseUUID(id)
	if err != nil {
		return nil, err
	}
	var supplierItem model.SupplierItem
	if err := database.DB.First(&supplierItem, "id = ?", entityID).Error; err != nil {
		return nil, err
	}

	return &supplierItem, nil
}

// ID is the resolver for the id field.
func (r *supplierItemResolver) ID(ctx context.Context, obj *model.SupplierItem) (string, error) {
	return obj.ID.String(), nil
}

// Supplier is the resolver for the supplier field.
func (r *supplierItemResolver) Supplier(ctx context.Context, obj *model.SupplierItem) (*model.Supplier, error) {
	var supplier model.Supplier
	if err := database.DB.First(&supplier, "id = ?", obj.SupplierID).Error; err != nil {
		return nil, err
	}

	return &supplier, nil
}

// Item is the resolver for the item field.
func (r *supplierItemResolver) Item(ctx context.Context, obj *model.SupplierItem) (*model.Item, error) {
	var item model.Item
	if err := database.DB.First(&item, "id = ?", obj.ItemID).Error; err != nil {
		return nil, err
	}

	return &item, nil
}

// SupplierItem returns generated.SupplierItemResolver implementation.
func (r *Resolver) SupplierItem() generated.SupplierItemResolver { return &supplierItemResolver{r} }

type supplierItemResolver struct{ *Resolver }
